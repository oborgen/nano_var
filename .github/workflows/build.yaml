# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      #- uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.0.2'

      # Disable Flutter analytics.
      - name: Disable Flutter analytics
        run: flutter config --no-analytics

      # Install melos to operate on multiple packages.
      - name: Intall Melos
        run: dart pub global activate melos

      # Add ~/.pub-cache/bin to path to make melos work.
      - name: Pub cache path
        run: echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      # Install dependencies by calling "melos bootstrap".
      - name: Install dependencies
        run: melos bootstrap

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Run build_runner in all packages.
      - name: Run build_runner
        run: melos exec "dart run build_runner build"

        # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: melos exec "dart analyze"
      
      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        #run: melos exec "dart test"
        run: melos exec "flutter test --coverage"

      - name: Check if set
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: if [ -z ${CODECOV_TOKEN+x} ]; then echo "CODECOV_TOKEN is unset"; else echo "CODECOV_TOKEN is set"; fi

      - name: Publish coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash)
